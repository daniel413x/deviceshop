{"version":3,"file":"static/js/161.28692ba0.chunk.js","mappings":"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","sources":["components/Account/AccountSideCol.tsx","components/Account/Credentials/UploadedImage.tsx","components/Account/Credentials/EditFieldModal.tsx","components/Account/Credentials/Field.tsx","components/Account/Credentials/EditAvatarModal.tsx","pages/Account/Credentials/index.tsx"],"sourcesContent":["import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { accountSideColLinks } from '../../utils/arrays';\nimport Dropdown from '../Dropdown';\nimport List from '../List';\n\nfunction AccountSideCol() {\n  const { pathname } = useLocation();\n  const showInMobile = pathname === '/account';\n  return (\n    <div className={`left-side-col ${showInMobile && 'show'}`}>\n      <div className=\"labeled-col\">\n        <span className=\"label\">\n          Your account\n        </span>\n        <List\n          items={accountSideColLinks}\n          renderAs={({ to, label }) => (\n            <li key={`${to}_navButton`}>\n              <div className=\"divider\" />\n              <Dropdown\n                to={to}\n                label={label}\n              />\n            </li>\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default AccountSideCol;\n","import React, {\n  useState, useEffect, ChangeEvent, useRef,\n} from 'react';\nimport useInputIncomplete from '../../../hooks/useInputIncomplete';\nimport Button from '../../Button';\n\ninterface UploadedImageProps {\n  buttonClass?: string;\n  imageClass?: string;\n  initialImage?: string;\n  pressedSubmit?: boolean;\n  setPressedSubmit?: (param: boolean) => void;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onChangeWith?: () => void;\n  name: string;\n  id?: string;\n  tabbable?: number;\n}\n\nfunction UploadedImage({\n  imageClass,\n  buttonClass,\n  initialImage,\n  pressedSubmit,\n  setPressedSubmit,\n  onChange,\n  onChangeWith,\n  name,\n  id,\n  tabbable,\n}: UploadedImageProps) {\n  const [selectedFile, setSelectedFile] = useState<Blob | MediaSource>();\n  const [preview, setPreview] = useState<string>('');\n  const {\n    warn,\n  } = useInputIncomplete({\n    value: selectedFile,\n    setPressedSubmit,\n    pressedSubmit,\n  });\n  const ref = useRef<HTMLInputElement>(null);\n  const selectFile = (e: ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) {\n      setSelectedFile(undefined);\n      return;\n    }\n    setSelectedFile(e.target.files[0]);\n  };\n  const handleOnChange = onChange || selectFile;\n  useEffect(() => setPreview(initialImage || ''), [initialImage]);\n  useEffect(() => {\n    if (onChangeWith) {\n      onChangeWith();\n    }\n    if (selectedFile && initialImage) {\n      const objectUrl = URL.createObjectURL(selectedFile);\n      setPreview(objectUrl);\n      return () => URL.revokeObjectURL(objectUrl);\n    }\n    if (!selectedFile && initialImage) {\n      return setPreview(initialImage);\n    }\n    if (!selectedFile) {\n      return setPreview('');\n    }\n    const objectUrl = URL.createObjectURL(selectedFile);\n    setPreview(objectUrl);\n    return () => URL.revokeObjectURL(objectUrl);\n  }, [selectedFile]);\n  return (\n    <Button\n      buttonStyle=\"blank\"\n      className={`button-overlay preview ${buttonClass}`}\n      onClick={() => ref.current?.click()}\n      tabIndex={tabbable}\n    >\n      <img\n        src={preview}\n        alt=\"Uploaded file\"\n        className={`preview ${imageClass}`}\n      />\n      <input\n        id={id}\n        type=\"file\"\n        onChange={handleOnChange}\n        className={`replace-image-input hidden ${warn && 'warn'}`}\n        name={name}\n        // multiple={multiple}\n        ref={ref}\n      />\n      <div className=\"replace-message\">\n        Replace\n      </div>\n    </Button>\n  );\n}\n\nUploadedImage.defaultProps = {\n  id: '',\n  imageClass: '',\n  buttonClass: '',\n  initialImage: '',\n  onChange: undefined,\n  onChangeWith: undefined,\n  pressedSubmit: false,\n  setPressedSubmit: false,\n  tabbable: undefined,\n};\n\nexport default UploadedImage;\n","import React, {\n  useContext, useState, FormEvent, useEffect,\n} from 'react';\nimport Context from '../../../context/context';\nimport { editUser } from '../../../http/userAPI';\nimport { unCamelCase } from '../../../utils/functions';\nimport Button from '../../Button';\nimport CloseButton from '../../CloseButton';\nimport LabeledInput from '../../LabeledInput';\nimport Modal from '../../Modal';\n\ninterface EditFieldModalProps {\n  field: string;\n  previous?: string;\n  close: () => void;\n}\n\nfunction EditFieldModal({\n  close,\n  field,\n  previous,\n}: EditFieldModalProps) {\n  const {\n    notifications,\n    user,\n  } = useContext(Context);\n  const [pressedSubmit, setPressedSubmit] = useState<boolean>(false);\n  const [newValue, setNewValue] = useState<string>('');\n  const [confirmPassword, setConfirmPassword] = useState<string>('');\n  const submit = async (event: FormEvent) => {\n    event.preventDefault();\n    setPressedSubmit(true);\n    try {\n      const updatedUser = await editUser({ [field]: newValue });\n      user.set(updatedUser);\n      close();\n      notifications.message(\n        'Field updated',\n      );\n    } catch (error: any) {\n      notifications.error(\n        error.response.data.message,\n      );\n    }\n  };\n  const fieldReadable = unCamelCase(field);\n  const password = field === 'password';\n  useEffect(() => {\n    if (field) {\n      setPressedSubmit(false);\n      setNewValue('');\n    }\n  }, [field]);\n  return (\n    <Modal\n      show={field}\n      close={close}\n      className=\"edit-field\"\n      id=\"edit-field\"\n      size=\"medium\"\n    >\n      <div className=\"window-header\">\n        <div className=\"left-col\">\n          <span className=\"name\">\n            Change field\n          </span>\n        </div>\n        <CloseButton\n          onMouseDown={close}\n        />\n      </div>\n      <form onSubmit={submit}>\n        <div className=\"body\">\n          <h2 className=\"header\">\n            Enter new value\n          </h2>\n          <LabeledInput\n            label={fieldReadable || 'Field'}\n            input={newValue}\n            setInput={setNewValue}\n            placeholder={previous?.toString() || 'false'}\n            type={password ? 'password' : 'input'}\n            id=\"new-value\"\n          />\n          {password && (\n          <LabeledInput\n            label=\"Confirm password\"\n            input={confirmPassword}\n            setInput={setConfirmPassword}\n            placeholder=\"\"\n            type=\"password\"\n            id=\"confirm-password\"\n          />\n          )}\n        </div>\n        <div className=\"bottom-buttons\">\n          <Button\n            className={`submit-button ${pressedSubmit && 'blocked'} ${password && newValue !== confirmPassword && 'blocked'} ${!newValue && 'blocked'}`}\n            type=\"submit\"\n          >\n            Confirm\n          </Button>\n          <Button\n            onClick={close}\n          >\n            Close\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nEditFieldModal.defaultProps = {\n  previous: '',\n};\n\nexport default EditFieldModal;\n","import React from 'react';\nimport { unCamelCase } from '../../../utils/functions';\nimport Button from '../../Button';\nimport RefocusedElement from '../../RefocusedElement';\n\ninterface FieldProps {\n  field: string;\n  value?: string;\n  openEditFieldModal: (editedFieldName: string, previousVal: string) => void;\n}\n\nfunction Field({\n  field,\n  value,\n  openEditFieldModal,\n}: FieldProps) {\n  const avatarField = field === 'avatar';\n  const fieldReadable = unCamelCase(field);\n  return (\n    <div className=\"field\">\n      <div className=\"field-value-col\">\n        <span className=\"key\">\n          {fieldReadable}\n        </span>\n        <span className=\"value\">\n          {!avatarField && (value || 'Blank')}\n          {avatarField && (\n            <img\n              src={`${process.env.REACT_APP_API_URL}${value}`}\n              alt=\"Your avatar\"\n              className=\"avatar\"\n            />\n          )}\n        </span>\n      </div>\n      <RefocusedElement>\n        <Button\n          onClick={openEditFieldModal}\n        >\n          Change\n        </Button>\n      </RefocusedElement>\n    </div>\n  );\n}\n\nField.defaultProps = {\n  value: '',\n};\n\nexport default Field;\n","import React, {\n  useContext, useState, FormEvent,\n} from 'react';\nimport Context from '../../../context/context';\nimport { editUser } from '../../../http/userAPI';\nimport { ReactComponent as PlainCheck } from '../../../assets/icons/PlainCheck.svg';\nimport Button from '../../Button';\nimport CloseButton from '../../CloseButton';\nimport Modal from '../../Modal';\nimport UploadedImage from './UploadedImage';\n\ninterface EditFieldModalProps {\n  show: boolean;\n  close: () => void;\n}\n\nfunction EditFieldModal({\n  close,\n  show,\n}: EditFieldModalProps) {\n  const { notifications, user } = useContext(Context);\n  const [pressedSubmit, setPressedSubmit] = useState<boolean>(false);\n  const [success, setSuccess] = useState<boolean>(false);\n  const submit = async (e: FormEvent<HTMLFormElement>) => {\n    try {\n      e.preventDefault();\n      setPressedSubmit(true);\n      const formData = new FormData(e.currentTarget);\n      const { avatar } = await editUser(formData);\n      user.setAvatar(avatar);\n      setSuccess(true);\n    } catch (error: any) {\n      notifications.error(\n        `${error.response.data.message}`,\n      );\n    } finally {\n      setPressedSubmit(false);\n    }\n  };\n  const unblock = () => {\n    setSuccess(false);\n    setPressedSubmit(false);\n  };\n  return (\n    <Modal\n      show={show}\n      close={close}\n      className=\"edit-avatar\"\n      id=\"edit-avatar\"\n      size=\"medium\"\n    >\n      <div className=\"window-header\">\n        <div className=\"left-col\">\n          <span className=\"name\">\n            Change field\n          </span>\n        </div>\n        <CloseButton\n          onMouseDown={close}\n        />\n      </div>\n      <form onSubmit={submit}>\n        <div className=\"body\">\n          <UploadedImage\n            name=\"avatar\"\n            initialImage={user.avatar ? `${process.env.REACT_APP_API_URL}${user.avatar}` : ''}\n            onChangeWith={() => unblock()}\n          />\n        </div>\n        <div className=\"bottom-buttons\">\n          <Button\n            className={`submit-button ${(pressedSubmit || success) && 'blocked'}`}\n            id=\"edit-avatar-save-button\"\n            type=\"submit\"\n          >\n            {(success) && <PlainCheck />}\n            {`${(success) ? 'Your avatar was changed' : 'Save'}`}\n          </Button>\n          <Button\n            onClick={close}\n          >\n            Close\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nexport default EditFieldModal;\n","import React, { useContext, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport EditFieldModal from '../../../components/Account/Credentials/EditFieldModal';\nimport Context from '../../../context/context';\nimport List from '../../../components/List';\nimport Field from '../../../components/Account/Credentials/Field';\nimport EditAvatarModal from '../../../components/Account/Credentials/EditAvatarModal';\nimport ColumnedPage from '../../../components/ColumnedPage';\nimport AccountSideCol from '../../../components/Account/AccountSideCol';\n\nfunction Credentials() {\n  const {\n    user,\n  } = useContext(Context);\n  const [editedField, setEditedField] = useState<string>('');\n  const [showEditAvatar, setShowEditAvatar] = useState<boolean>(false);\n  const [previous, setPrevious] = useState<string>('');\n  const openEditFieldModal = (editedFieldName: string, previousVal?: string) => {\n    setEditedField(editedFieldName);\n    setPrevious(previousVal || '');\n  };\n  const closeEditFieldModal = () => {\n    setEditedField('');\n    setPrevious('');\n  };\n  const boxes = [\n    {\n      field: 'avatar',\n      value: user.avatar,\n    },\n    {\n      field: 'firstName',\n      value: user.firstName,\n    },\n    {\n      field: 'lastName',\n      value: user.lastName,\n    },\n    {\n      field: 'password',\n      value: '***',\n    },\n    {\n      field: 'phoneNumber',\n      value: user.phoneNumber,\n    },\n  ];\n  return (\n    <ColumnedPage\n      id=\"credentials\"\n      header=\"Your account details\"\n      leftSideCol={<AccountSideCol />}\n\n    >\n      <EditFieldModal\n        field={editedField}\n        previous={previous}\n        close={closeEditFieldModal}\n      />\n      <EditAvatarModal\n        show={showEditAvatar}\n        close={() => setShowEditAvatar(false)}\n      />\n      <List\n        childrenBefore\n        className=\"field-ul\"\n        items={boxes}\n        renderAs={((box) => (\n          <li key={box.field}>\n            <Field\n              field={box.field}\n              value={box.value}\n              openEditFieldModal={box.field === 'avatar' ? () => setShowEditAvatar(true) : () => openEditFieldModal(box.field, box.value)}\n            />\n          </li>\n        ))}\n      />\n    </ColumnedPage>\n  );\n}\n\nexport default observer(Credentials);\n"],"names":["showInMobile","useLocation","pathname","className","items","accountSideColLinks","renderAs","to","label","UploadedImage","imageClass","buttonClass","initialImage","pressedSubmit","setPressedSubmit","onChange","onChangeWith","name","id","tabbable","useState","selectedFile","setSelectedFile","preview","setPreview","warn","useInputIncomplete","value","ref","useRef","handleOnChange","e","target","files","length","undefined","useEffect","objectUrl","URL","createObjectURL","revokeObjectURL","buttonStyle","onClick","current","click","tabIndex","src","alt","type","defaultProps","EditFieldModal","close","field","previous","useContext","Context","notifications","user","newValue","setNewValue","confirmPassword","setConfirmPassword","submit","event","preventDefault","editUser","updatedUser","set","message","error","response","data","fieldReadable","unCamelCase","password","Modal","show","size","CloseButton","onMouseDown","onSubmit","LabeledInput","input","setInput","placeholder","toString","Button","Field","openEditFieldModal","avatarField","process","RefocusedElement","success","setSuccess","formData","FormData","currentTarget","avatar","setAvatar","PlainCheck","observer","editedField","setEditedField","showEditAvatar","setShowEditAvatar","setPrevious","boxes","firstName","lastName","phoneNumber","ColumnedPage","header","leftSideCol","AccountSideCol","EditAvatarModal","List","childrenBefore","box","editedFieldName","previousVal"],"sourceRoot":""}