{"version":3,"file":"static/js/935.18637190.chunk.js","mappings":"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","sources":["../node_modules/focus-trap-react/dist/focus-trap-react.js","../node_modules/focus-trap/index.js","../node_modules/tabbable/src/index.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar _require = require('focus-trap'),\n  createFocusTrap = _require.createFocusTrap;\nvar _require2 = require('tabbable'),\n  isFocusable = _require2.isFocusable;\nvar FocusTrap = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusTrap, _React$Component);\n  var _super = _createSuper(FocusTrap);\n  function FocusTrap(props) {\n    var _this;\n    _classCallCheck(this, FocusTrap);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"getNodeForOption\", function (optionName) {\n      var _this$internalOptions;\n      // use internal options first, falling back to original options\n      var optionValue = (_this$internalOptions = this.internalOptions[optionName]) !== null && _this$internalOptions !== void 0 ? _this$internalOptions : this.originalOptions[optionName];\n      if (typeof optionValue === 'function') {\n        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          params[_key - 1] = arguments[_key];\n        }\n        optionValue = optionValue.apply(void 0, params);\n      }\n      if (optionValue === true) {\n        optionValue = undefined; // use default value\n      }\n\n      if (!optionValue) {\n        if (optionValue === undefined || optionValue === false) {\n          return optionValue;\n        }\n        // else, empty string (invalid), null (invalid), 0 (invalid)\n\n        throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n      }\n      var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n      if (typeof optionValue === 'string') {\n        var _this$getDocument;\n        node = (_this$getDocument = this.getDocument()) === null || _this$getDocument === void 0 ? void 0 : _this$getDocument.querySelector(optionValue); // resolve to node, or null if fails\n        if (!node) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n      }\n      return node;\n    });\n    _this.handleDeactivate = _this.handleDeactivate.bind(_assertThisInitialized(_this));\n    _this.handlePostDeactivate = _this.handlePostDeactivate.bind(_assertThisInitialized(_this));\n    _this.handleClickOutsideDeactivates = _this.handleClickOutsideDeactivates.bind(_assertThisInitialized(_this));\n\n    // focus-trap options used internally when creating the trap\n    _this.internalOptions = {\n      // We need to hijack the returnFocusOnDeactivate option,\n      // because React can move focus into the element before we arrived at\n      // this lifecycle hook (e.g. with autoFocus inputs). So the component\n      // captures the previouslyFocusedElement in componentWillMount,\n      // then (optionally) returns focus to it in componentWillUnmount.\n      returnFocusOnDeactivate: false,\n      // the rest of these are also related to deactivation of the trap, and we\n      //  need to use them and control them as well\n      checkCanReturnFocus: null,\n      onDeactivate: _this.handleDeactivate,\n      onPostDeactivate: _this.handlePostDeactivate,\n      // we need to special-case this setting as well so that we can know if we should\n      //  NOT return focus if the trap gets auto-deactivated as the result of an\n      //  outside click (otherwise, we'll always think we should return focus because\n      //  of how we manage that flag internally here)\n      clickOutsideDeactivates: _this.handleClickOutsideDeactivates\n    };\n\n    // original options provided by the consumer\n    _this.originalOptions = {\n      // because of the above `internalOptions`, we maintain our own flag for\n      //  this option, and default it to `true` because that's focus-trap's default\n      returnFocusOnDeactivate: true,\n      // because of the above `internalOptions`, we keep these separate since\n      //  they're part of the deactivation process which we configure (internally) to\n      //  be shared between focus-trap and focus-trap-react\n      onDeactivate: null,\n      onPostDeactivate: null,\n      checkCanReturnFocus: null,\n      // the user's setting, defaulted to false since focus-trap defaults this to false\n      clickOutsideDeactivates: false\n    };\n    var focusTrapOptions = props.focusTrapOptions;\n    for (var optionName in focusTrapOptions) {\n      if (!Object.prototype.hasOwnProperty.call(focusTrapOptions, optionName)) {\n        continue;\n      }\n      if (optionName === 'returnFocusOnDeactivate' || optionName === 'onDeactivate' || optionName === 'onPostDeactivate' || optionName === 'checkCanReturnFocus' || optionName === 'clickOutsideDeactivates') {\n        _this.originalOptions[optionName] = focusTrapOptions[optionName];\n        continue; // exclude from internalOptions\n      }\n\n      _this.internalOptions[optionName] = focusTrapOptions[optionName];\n    }\n\n    // if set, `{ target: Node, allowDeactivation: boolean }` where `target` is the outside\n    //  node that was clicked, and `allowDeactivation` is the result of the consumer's\n    //  option (stored in `this.originalOptions.clickOutsideDeactivates`, which may be a\n    //  function) whether to allow or deny auto-deactivation on click on this outside node\n    _this.outsideClick = null;\n\n    // elements from which to create the focus trap on mount; if a child is used\n    //  instead of the `containerElements` prop, we'll get the child's related\n    //  element when the trap renders and then is declared 'mounted'\n    _this.focusTrapElements = props.containerElements || [];\n\n    // now we remember what the currently focused element is, not relying on focus-trap\n    _this.updatePreviousElement();\n    return _this;\n  }\n\n  /**\n   * Gets the configured document.\n   * @returns {Document|undefined} Configured document, falling back to the main\n   *  document, if it exists. During SSR, `undefined` is returned since the\n   *  document doesn't exist.\n   */\n  _createClass(FocusTrap, [{\n    key: \"getDocument\",\n    value: function getDocument() {\n      // SSR: careful to check if `document` exists before accessing it as a variable\n      return this.props.focusTrapOptions.document || (typeof document !== 'undefined' ? document : undefined);\n    }\n\n    /**\n     * Gets the node for the given option, which is expected to be an option that\n     *  can be either a DOM node, a string that is a selector to get a node, `false`\n     *  (if a node is explicitly NOT given), or a function that returns any of these\n     *  values.\n     * @param {string} optionName\n     * @returns {undefined | false | HTMLElement | SVGElement} Returns\n     *  `undefined` if the option is not specified; `false` if the option\n     *  resolved to `false` (node explicitly not given); otherwise, the resolved\n     *  DOM node.\n     * @throws {Error} If the option is set, not `false`, and is not, or does not\n     *  resolve to a node.\n     */\n  }, {\n    key: \"getReturnFocusNode\",\n    value: function getReturnFocusNode() {\n      var node = this.getNodeForOption('setReturnFocus', this.previouslyFocusedElement);\n      return node ? node : node === false ? false : this.previouslyFocusedElement;\n    }\n\n    /** Update the previously focused element with the currently focused element. */\n  }, {\n    key: \"updatePreviousElement\",\n    value: function updatePreviousElement() {\n      var currentDocument = this.getDocument();\n      if (currentDocument) {\n        this.previouslyFocusedElement = currentDocument.activeElement;\n      }\n    }\n  }, {\n    key: \"deactivateTrap\",\n    value: function deactivateTrap() {\n      // NOTE: it's possible the focus trap has already been deactivated without our knowing it,\n      //  especially if the user set the `clickOutsideDeactivates: true` option on the trap,\n      //  and the mouse was clicked on some element outside the trap; at that point, focus-trap\n      //  will initiate its auto-deactivation process, which will call our own\n      //  handleDeactivate(), which will call into this method\n      if (!this.focusTrap || !this.focusTrap.active) {\n        return;\n      }\n      this.focusTrap.deactivate({\n        // NOTE: we never let the trap return the focus since we do that ourselves\n        returnFocus: false,\n        // we'll call this in our own post deactivate handler so make sure the trap doesn't\n        //  do it prematurely\n        checkCanReturnFocus: null,\n        // let it call the user's original deactivate handler, if any, instead of\n        //  our own which calls back into this function\n        onDeactivate: this.originalOptions.onDeactivate\n        // NOTE: for post deactivate, don't specify anything so that it calls the\n        //  onPostDeactivate handler specified on `this.internalOptions`\n        //  which will always be our own `handlePostDeactivate()` handler, which\n        //  will finish things off by calling the user's provided onPostDeactivate\n        //  handler, if any, at the right time\n        // onPostDeactivate: NOTHING\n      });\n    }\n  }, {\n    key: \"handleClickOutsideDeactivates\",\n    value: function handleClickOutsideDeactivates(event) {\n      // use consumer's option (or call their handler) as the permission or denial\n      var allowDeactivation = typeof this.originalOptions.clickOutsideDeactivates === 'function' ? this.originalOptions.clickOutsideDeactivates.call(null, event) // call out of context\n      : this.originalOptions.clickOutsideDeactivates; // boolean\n\n      if (allowDeactivation) {\n        // capture the outside target that was clicked so we can use it in the deactivation\n        //  process since the consumer allowed it to cause auto-deactivation\n        this.outsideClick = {\n          target: event.target,\n          allowDeactivation: allowDeactivation\n        };\n      }\n      return allowDeactivation;\n    }\n  }, {\n    key: \"handleDeactivate\",\n    value: function handleDeactivate() {\n      if (this.originalOptions.onDeactivate) {\n        this.originalOptions.onDeactivate.call(null); // call user's handler out of context\n      }\n\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"handlePostDeactivate\",\n    value: function handlePostDeactivate() {\n      var _this2 = this;\n      var finishDeactivation = function finishDeactivation() {\n        var returnFocusNode = _this2.getReturnFocusNode();\n        var canReturnFocus = !!(\n        // did the consumer allow it?\n\n        _this2.originalOptions.returnFocusOnDeactivate && // can we actually focus the node?\n        returnFocusNode !== null && returnFocusNode !== void 0 && returnFocusNode.focus && (\n        // was there an outside click that allowed deactivation?\n        !_this2.outsideClick ||\n        // did the consumer allow deactivation when the outside node was clicked?\n        _this2.outsideClick.allowDeactivation &&\n        // is the outside node NOT focusable (implying that it did NOT receive focus\n        //  as a result of the click-through) -- in which case do NOT restore focus\n        //  to `returnFocusNode` because focus should remain on the outside node\n        !isFocusable(_this2.outsideClick.target, _this2.internalOptions.tabbableOptions))\n\n        // if no, the restore focus to `returnFocusNode` at this point\n        );\n\n        var _this2$internalOption = _this2.internalOptions.preventScroll,\n          preventScroll = _this2$internalOption === void 0 ? false : _this2$internalOption;\n        if (canReturnFocus) {\n          // return focus to the element that had focus when the trap was activated\n          returnFocusNode.focus({\n            preventScroll: preventScroll\n          });\n        }\n        if (_this2.originalOptions.onPostDeactivate) {\n          _this2.originalOptions.onPostDeactivate.call(null); // don't call it in context of \"this\"\n        }\n\n        _this2.outsideClick = null; // reset: no longer needed\n      };\n\n      if (this.originalOptions.checkCanReturnFocus) {\n        this.originalOptions.checkCanReturnFocus.call(null, this.getReturnFocusNode()) // call out of context\n        .then(finishDeactivation, finishDeactivation);\n      } else {\n        finishDeactivation();\n      }\n    }\n  }, {\n    key: \"setupFocusTrap\",\n    value: function setupFocusTrap() {\n      if (this.focusTrap) {\n        // trap already exists: it's possible we're in StrictMode and we're being remounted,\n        //  in which case, we will have deactivated the trap when we got unmounted (remember,\n        //  StrictMode, in development, purposely unmounts and remounts components after\n        //  mounting them the first time to make sure they have reusable state,\n        //  @see https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state) so now\n        //  we need to restore the state of the trap according to our component state\n        // NOTE: Strict mode __violates__ assumptions about the `componentWillUnmount()` API\n        //  which clearly states -- even for React 18 -- that, \"Once a component instance is\n        //  unmounted, __it will never be mounted again.__\" (emphasis ours). So when we get\n        //  unmounted, we assume we're gone forever and we deactivate the trap. But then\n        //  we get remounted and we're supposed to restore state. But if you had paused,\n        //  we've now deactivated (we don't know we're amount to get remounted again)\n        //  which means we need to reactivate and then pause. Otherwise, do nothing.\n        if (this.props.active && !this.focusTrap.active) {\n          this.focusTrap.activate();\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      } else {\n        var nodesExist = this.focusTrapElements.some(Boolean);\n        if (nodesExist) {\n          // eslint-disable-next-line react/prop-types -- _createFocusTrap is an internal prop\n          this.focusTrap = this.props._createFocusTrap(this.focusTrapElements, this.internalOptions);\n          if (this.props.active) {\n            this.focusTrap.activate();\n          }\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.active) {\n        this.setupFocusTrap();\n      }\n      // else, wait for later activation in case the `focusTrapOptions` will be updated\n      //  again before the trap is activated (e.g. if waiting to know what the document\n      //  object will be, so the Trap must be rendered, but the consumer is waiting to\n      //  activate until they have obtained the document from a ref)\n      //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.focusTrap) {\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrap.updateContainerElements(this.props.containerElements);\n        }\n        var hasActivated = !prevProps.active && this.props.active;\n        var hasDeactivated = prevProps.active && !this.props.active;\n        var hasPaused = !prevProps.paused && this.props.paused;\n        var hasUnpaused = prevProps.paused && !this.props.paused;\n        if (hasActivated) {\n          this.updatePreviousElement();\n          this.focusTrap.activate();\n        }\n        if (hasDeactivated) {\n          this.deactivateTrap();\n          return; // un/pause does nothing on an inactive trap\n        }\n\n        if (hasPaused) {\n          this.focusTrap.pause();\n        }\n        if (hasUnpaused) {\n          this.focusTrap.unpause();\n        }\n      } else {\n        // NOTE: if we're in `componentDidUpdate` and we don't have a trap yet,\n        //  it either means it shouldn't be active, or it should be but none of\n        //  of given `containerElements` were present in the DOM the last time\n        //  we tried to create the trap\n\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrapElements = this.props.containerElements;\n        }\n\n        // don't create the trap unless it should be active in case the consumer\n        //  is still updating `focusTrapOptions`\n        //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n        if (this.props.active) {\n          this.updatePreviousElement();\n          this.setupFocusTrap();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var child = this.props.children ? React.Children.only(this.props.children) : undefined;\n      if (child) {\n        if (child.type && child.type === React.Fragment) {\n          throw new Error('A focus-trap cannot use a Fragment as its child container. Try replacing it with a <div> element.');\n        }\n        var callbackRef = function callbackRef(element) {\n          var containerElements = _this3.props.containerElements;\n          if (child) {\n            if (typeof child.ref === 'function') {\n              child.ref(element);\n            } else if (child.ref) {\n              child.ref.current = element;\n            }\n          }\n          _this3.focusTrapElements = containerElements ? containerElements : [element];\n        };\n        var childWithRef = React.cloneElement(child, {\n          ref: callbackRef\n        });\n        return childWithRef;\n      }\n      return null;\n    }\n  }]);\n  return FocusTrap;\n}(React.Component); // support server-side rendering where `Element` will not be defined\nvar ElementType = typeof Element === 'undefined' ? Function : Element;\nFocusTrap.propTypes = {\n  active: PropTypes.bool,\n  paused: PropTypes.bool,\n  focusTrapOptions: PropTypes.shape({\n    document: PropTypes.object,\n    onActivate: PropTypes.func,\n    onPostActivate: PropTypes.func,\n    checkCanFocusTrap: PropTypes.func,\n    onDeactivate: PropTypes.func,\n    onPostDeactivate: PropTypes.func,\n    checkCanReturnFocus: PropTypes.func,\n    initialFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, PropTypes.bool, PropTypes.func]),\n    fallbackFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string,\n    // NOTE: does not support `false` as value (or return value from function)\n    PropTypes.func]),\n    escapeDeactivates: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    clickOutsideDeactivates: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    returnFocusOnDeactivate: PropTypes.bool,\n    setReturnFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, PropTypes.bool, PropTypes.func]),\n    allowOutsideClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    preventScroll: PropTypes.bool,\n    tabbableOptions: PropTypes.shape({\n      displayCheck: PropTypes.oneOf(['full', 'legacy-full', 'non-zero-area', 'none']),\n      getShadowRoot: PropTypes.oneOfType([PropTypes.bool, PropTypes.func])\n    }),\n    trapStack: PropTypes.array,\n    isKeyForward: PropTypes.func,\n    isKeyBackward: PropTypes.func\n  }),\n  containerElements: PropTypes.arrayOf(PropTypes.instanceOf(ElementType)),\n  // DOM element ONLY\n  children: PropTypes.oneOfType([PropTypes.element,\n  // React element\n  PropTypes.instanceOf(ElementType) // DOM element\n  ])\n\n  // NOTE: _createFocusTrap is internal, for testing purposes only, so we don't\n  //  specify it here. It's expected to be set to the function returned from\n  //  require('focus-trap'), or one with a compatible interface.\n};\n\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  _createFocusTrap: createFocusTrap\n};\nmodule.exports = FocusTrap;","import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    const target = getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n","// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nconst candidateSelectors = [\n  'input:not([inert])',\n  'select:not([inert])',\n  'textarea:not([inert])',\n  'a[href]:not([inert])',\n  'button:not([inert])',\n  '[tabindex]:not(slot):not([inert])',\n  'audio[controls]:not([inert])',\n  'video[controls]:not([inert])',\n  '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n  'details>summary:first-of-type:not([inert])',\n  'details:not([inert])',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element?.getRootNode?.()\n    : (element) => element?.ownerDocument;\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nconst isInert = function (node, lookUp = true) {\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  const inertAtt = node?.getAttribute?.('inert');\n  const inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  const result = inert || (lookUp && node && isInert(node.parentNode)); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nconst isContentEditable = function (node) {\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  const attValue = node?.getAttribute?.('contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      const validShadowRoot =\n        !isInert(shadowRoot, false) &&\n        (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\nconst getTabindex = function (node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if (\n      (isScope ||\n        /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        isContentEditable(node)) &&\n      isNaN(parseInt(node.getAttribute('tabindex'), 10))\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  let nodeRoot = node && getRootNode(node);\n  let nodeRootHost = nodeRoot?.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  let attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    attached = !!(\n      nodeRootHost?.ownerDocument?.contains(nodeRootHost) ||\n      node?.ownerDocument?.contains(node)\n    );\n\n    while (!attached && nodeRootHost) {\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = nodeRoot?.host;\n      attached = !!nodeRootHost?.ownerDocument?.contains(nodeRootHost);\n    }\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabindex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getTabindex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable };\n"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","call","e","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","arguments","apply","_possibleConstructorReturn","self","TypeError","_assertThisInitialized","ReferenceError","getPrototypeOf","arg","input","hint","prim","toPrimitive","undefined","res","String","Number","_toPrimitive","React","require","PropTypes","createFocusTrap","isFocusable","FocusTrap","_React$Component","subClass","superClass","create","value","_inherits","Constructor","protoProps","staticProps","_super","_this","instance","_classCallCheck","optionName","_this$internalOptions","optionValue","internalOptions","originalOptions","_len","params","Array","_key","Error","concat","_this$getDocument","node","getDocument","querySelector","handleDeactivate","handlePostDeactivate","handleClickOutsideDeactivates","returnFocusOnDeactivate","checkCanReturnFocus","onDeactivate","onPostDeactivate","clickOutsideDeactivates","focusTrapOptions","hasOwnProperty","outsideClick","focusTrapElements","containerElements","updatePreviousElement","document","getNodeForOption","previouslyFocusedElement","currentDocument","activeElement","focusTrap","active","deactivate","returnFocus","event","allowDeactivation","deactivateTrap","_this2","finishDeactivation","returnFocusNode","getReturnFocusNode","canReturnFocus","focus","tabbableOptions","_this2$internalOption","preventScroll","then","activate","paused","pause","some","_createFocusTrap","setupFocusTrap","prevProps","updateContainerElements","hasActivated","hasDeactivated","hasPaused","hasUnpaused","unpause","_this3","child","children","Children","only","type","Fragment","cloneElement","ref","element","current","Component","ElementType","Element","Function","propTypes","bool","shape","object","onActivate","func","onPostActivate","checkCanFocusTrap","initialFocus","oneOfType","instanceOf","string","fallbackFocus","escapeDeactivates","setReturnFocus","allowOutsideClick","displayCheck","oneOf","getShadowRoot","trapStack","array","isKeyForward","isKeyBackward","arrayOf","defaultProps","module","exports","activeTrap","trapIndex","indexOf","push","splice","isSelectableInput","tagName","toLowerCase","select","isEscapeEvent","keyCode","isTabEvent","shiftKey","delay","fn","setTimeout","findIndex","arr","elements","valueOrHandler","getActualTarget","shadowRoot","composedPath","internalTrapStack","idx","every","userOptions","config","delayInitialFocus","state","containers","tabbableGroups","getOption","configOverrideOptions","configOptionName","findContainerIndex","container","tabbableNodes","contains","find","_key2","getInitialFocusNode","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","isTabbable","reverse","filter","group","tryFocus","previousActiveElement","checkPointerDown","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKeyNav","isBackward","mostRecentlyFocusedNode","destinationNode","containerIndex","containerGroup","startOfGroupIndex","destinationGroupIndex","destinationGroup","lastOfGroupIndex","checkKey","checkClick","addListeners","addEventListener","capture","activeFocusTraps","passive","removeListeners","activateTrap","removeEventListener","activateOptions","finishActivation","deactivateOptions","options","delayInitialFocusTimer","nodeFocusedBeforeActivation","clearTimeout","elementsAsArray","trap","candidateSelectors","candidateSelector","join","NoElement","matches","msMatchesSelector","webkitMatchesSelector","getRootNode","_element$getRootNode","ownerDocument","isInert","lookUp","inertAtt","getAttribute","inert","attValue","candidates","querySelectorAll","unshift","getCandidatesIteratively","elementsToCheck","from","shift","assigned","assignedElements","content","flatten","scopeParent","validCandidate","includes","validShadowRoot","shadowRootFilter","getTabindex","isScope","tabIndex","test","isNaN","parseInt","sortOrderedTabbables","el","includeContainer","getCandidates","a","b","documentOrder","isInput","isHiddenInput","isDetailsWithSummary","nodeRootHost","nodeRoot","radioSet","escape","window","isTabbableRadio","CSS","err","console","error","message","isRadio","isNonTabbableRadio","isNodeAttached","radioScope","checked","name","queryRadios","getComputedStyle","visibility","isDirectSummary","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","getClientRects","isDisabledFromFieldset","item","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","host","isZeroArea","getBoundingClientRect","width","attached","_nodeRootHost","_nodeRootHost2$ownerD","height","isHidden","_ref","_nodeRoot","sortByOrder","candidateTabindex","orderedTabbables","r","nodes","form","forEach","regularTabbables","sort","reduce","acc","sortable","nestedCandidates","focusableCandidateSelector"],"sourceRoot":""}