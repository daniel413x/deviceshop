{"version":3,"file":"static/js/610.fa9e7980.chunk.js","mappings":"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","sources":["components/Address.tsx","components/Order.tsx","components/OrderItem.tsx","components/OrderItems.tsx","components/PageControl.tsx","components/PaginatedItemsCounter.tsx","hooks/usePagination.tsx","hooks/useQueriedItems.tsx","http/orderAPI.ts"],"sourcesContent":["import React from 'react';\nimport { IAddress } from '../types/types';\n\ninterface AddressProps {\n  address: Omit<IAddress, 'id' | 'userId'>;\n  email?: string;\n}\n\nfunction Address({\n  address,\n  email,\n}: AddressProps) {\n  const {\n    firstName,\n    lastName,\n    addressLineOne,\n    addressLineTwo,\n    city,\n    state,\n    zip,\n  } = address;\n  return (\n    <div className=\"address\">\n      <span className=\"name\">\n        {`${firstName} ${lastName}`}\n      </span>\n      <span className=\"address-line\">\n        {`${addressLineOne} ${addressLineTwo || ''} ${city}, ${state} ${zip}`}\n      </span>\n      <span className=\"country-line\">\n        United States\n      </span>\n      {email && (\n        <span className=\"email\">\n          {`${email}`}\n        </span>\n      )}\n    </div>\n  );\n}\n\nAddress.defaultProps = {\n  email: '',\n};\n\nexport default Address;\n","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Either, IOrder } from '../types/types';\nimport { dateMonthYear } from '../utils/functions';\nimport Button from './Button';\nimport OrderItems from './OrderItems';\nimport AngleDownIcon from './AngleDownIcon';\nimport Address from './Address';\nimport {\n  CANCELED, CANCELLATION_REQUESTED, DELIVERED, PROCESSING, RETURN_REQUESTED, SHIPPED,\n} from '../utils/consts';\nimport RefocusedElement from './RefocusedElement';\n\ntype OrderEitherProps = Either<\n{\n  setNewStatusOrder: (order: IOrder) => void;\n},\n{\n  setCanceledOrder: (order: IOrder) => void;\n  setReturnedOrderId: (id: string) => void;\n}>;\n\ntype OrderProps = {\n  order: IOrder;\n} & OrderEitherProps;\n\nfunction Order({\n  order,\n  setCanceledOrder,\n  setReturnedOrderId,\n  setNewStatusOrder,\n}: OrderProps) {\n  const [showAddress, setShowAddress] = useState<boolean>(false);\n  const {\n    createdAt,\n    orderAddress,\n    id,\n    orderItems,\n    status,\n  } = order;\n  const orderDate = dateMonthYear(createdAt.toString());\n  const orderDelivered = status.indexOf(DELIVERED) >= 0;\n  const orderCanceled = status.indexOf(CANCELED) >= 0;\n  const orderCancellationRequested = status.indexOf(CANCELLATION_REQUESTED) >= 0;\n  const returnRequested = status.indexOf(RETURN_REQUESTED) >= 0;\n  const orderShipped = status.indexOf(SHIPPED) >= 0;\n  const orderProcessing = status.length === 1 && status[0] === PROCESSING;\n  const showTrackingLink = !orderProcessing && !orderCanceled;\n  let statusLabel;\n  if (returnRequested) {\n    statusLabel = RETURN_REQUESTED;\n  } else if (orderCancellationRequested) {\n    statusLabel = CANCELLATION_REQUESTED;\n  } else if (orderDelivered) {\n    statusLabel = DELIVERED;\n  } else if (orderCanceled) {\n    statusLabel = CANCELED;\n  } else if (orderShipped) {\n    statusLabel = SHIPPED;\n  } else {\n    statusLabel = PROCESSING;\n  }\n  return (\n    <div className=\"order\">\n      <div className=\"header-bar\">\n        <div className=\"start-items\">\n          <div className=\"col\">\n            <span className=\"key\">\n              Order placed\n            </span>\n            <span className=\"value\">\n              {orderDate}\n            </span>\n          </div>\n          <div className=\"status col\">\n            <span className=\"key\">\n              Status\n            </span>\n            {showTrackingLink ? (\n              <NavLink to=\"#\" className=\"value\">\n                {statusLabel}\n              </NavLink>\n            ) : (\n              <span className=\"value\">\n                {statusLabel}\n              </span>\n            )}\n          </div>\n          <div className=\"col address\">\n            <span>\n              Shipping address\n            </span>\n            <span>\n              <button type=\"button\" onClick={() => setShowAddress(!showAddress)}>\n                {`${orderAddress.firstName} ${orderAddress.lastName}`}\n                <AngleDownIcon\n                  inverse={!showAddress}\n                />\n              </button>\n            </span>\n            {showAddress && <Address address={orderAddress} />}\n          </div>\n        </div>\n        <div className=\"end-items\">\n          <div className=\"col\">\n            <span>\n              Order\n              {' '}\n              <span className=\"id\">\n                {`${id.slice(0, 11)}...`}\n              </span>\n            </span>\n            <NavLink to={id}>\n              View confirmation\n            </NavLink>\n          </div>\n        </div>\n      </div>\n      <OrderItems\n        items={orderItems}\n        orderStatus={order.status}\n        orderShippingCost={order.shippingMethod.price}\n      />\n      <div className={`buttons-row ${orderCanceled && 'blocked'}`}>\n        {setNewStatusOrder && ( // admin only\n        <RefocusedElement>\n          <Button\n            onClick={() => setNewStatusOrder!(order)}\n            buttonStyle=\"secondary\"\n            className=\"change-status-button\"\n          >\n            Change status\n          </Button>\n        </RefocusedElement>\n        )}\n        {(setReturnedOrderId && setCanceledOrder) && ( // customer only\n          orderDelivered ? (\n            <RefocusedElement>\n              <Button\n                onClick={() => setReturnedOrderId!(id)}\n                buttonStyle=\"secondary\"\n              >\n                Return order\n              </Button>\n            </RefocusedElement>\n          ) : (\n            <RefocusedElement>\n              <Button\n                onClick={() => setCanceledOrder!(order)}\n                buttonStyle=\"secondary\"\n                className={`cancel-order-button ${orderCancellationRequested && 'blocked'}`}\n              >\n                Cancel order\n              </Button>\n            </RefocusedElement>\n          )\n        )}\n        <Button\n          buttonStyle=\"secondary\"\n        >\n          Contact\n        </Button>\n      </div>\n      <div className=\"divider\" />\n    </div>\n  );\n}\n\nexport default Order;\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { IOrderedAddon, IOrderedProduct, IReview } from '../types/types';\nimport { ReactComponent as FullStar } from '../assets/icons/FullStar.svg';\nimport { convertIntToPrice, formatPrice } from '../utils/functions';\nimport List from './List';\nimport Button from './Button';\nimport ReviewModal from './ReviewModal';\nimport { ACCOUNT_ROUTE, ORDERS_ROUTE } from '../utils/consts';\nimport RefocusedElement from './RefocusedElement';\n\ninterface AddonProps {\n  addon: IOrderedAddon;\n}\n\nfunction Addon({ addon }: AddonProps) {\n  const {\n    price,\n    addon: {\n      name,\n    },\n  } = addon;\n  const renderedPrice = formatPrice(convertIntToPrice(price));\n  return (\n    <div className=\"addon row\">\n      <span className=\"name\">\n        {name}\n      </span>\n      <div className=\"dots-divider\" />\n      <span className=\"price\">\n        $\n        {renderedPrice}\n      </span>\n    </div>\n  );\n}\n\ninterface OrderItemProps {\n  addons?: IOrderedAddon[];\n  legend: string;\n  value: number | string;\n  className?: string;\n  image?: string | false;\n  review?: IReview;\n  orderItem?: IOrderedProduct;\n  orderStatus?: string[];\n}\n\nfunction OrderItem({\n  addons,\n  legend,\n  value,\n  className,\n  image,\n  review,\n  orderItem,\n  orderStatus,\n}: OrderItemProps) {\n  const { pathname } = useLocation();\n  const [showReviewModal, setShowReviewModal] = useState<IOrderedProduct>();\n  const showReviewButton = orderItem && pathname === `/${ACCOUNT_ROUTE}/${ORDERS_ROUTE}`;\n  // const showReviewButton = !review && orderItem;\n  const renderAddons = addons && addons.length > 0;\n  let renderedPrice;\n  const showAPrice = typeof value === 'number';\n  if (showAPrice) {\n    renderedPrice = formatPrice(convertIntToPrice(value));\n  }\n  return (\n    <div className={`order-item ${className}`}>\n      {orderItem && (\n        <ReviewModal\n          show={showReviewModal}\n          orderedProduct={showReviewModal}\n          close={() => setShowReviewModal(undefined)}\n          review={review}\n          orderStatus={orderStatus}\n          productName={orderItem.shopproduct.name}\n        />\n      )}\n      {image && (\n        <img\n          src={`${process.env.REACT_APP_API_URL}${image}`}\n          alt={legend}\n          className=\"thumbnail\"\n        />\n      )}\n      <div className=\"row\">\n        <span className=\"name\">\n          {legend}\n        </span>\n        <div className=\"dots-divider\" />\n        <div className=\"end\">\n          {showReviewButton && (\n            <RefocusedElement>\n              <Button\n                className=\"show-review-modal-button button\"\n                onClick={() => setShowReviewModal(orderItem)}\n              >\n                <FullStar />\n                {!review ? 'Review' : 'Change'}\n              </Button>\n            </RefocusedElement>\n          )}\n          <span className=\"price\">\n            {showAPrice ? `$${renderedPrice}` : value}\n          </span>\n        </div>\n      </div>\n      {renderAddons && (\n      <List\n        className=\"addons-ul\"\n        items={addons!}\n        renderAs={((addon) => (\n          <li key={addon.id}>\n            <Addon\n              addon={addon}\n            />\n          </li>\n        ))}\n      />\n      )}\n      <div className=\"divider\" />\n    </div>\n  );\n}\n\nOrderItem.defaultProps = {\n  className: '',\n  addons: false,\n  image: '',\n  review: undefined,\n  orderItem: undefined,\n  orderStatus: undefined,\n};\n\nexport default OrderItem;\n","import { observer } from 'mobx-react-lite';\nimport React, { useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Context from '../context/context';\nimport { IOrderedProduct } from '../types/types';\nimport { CART_ROUTE, CHECKOUT_ROUTE } from '../utils/consts';\nimport { getIntTotal, getTax, getTotal } from '../utils/functions';\nimport List from './List';\nimport OrderItem from './OrderItem';\n\ninterface OrderItemsProps {\n  items: IOrderedProduct[];\n  showImages?: boolean;\n  orderStatus?: string[];\n  orderShippingCost?: number | undefined;\n}\n\nfunction OrderItems({\n  items,\n  showImages,\n  orderStatus,\n  orderShippingCost,\n}: OrderItemsProps) {\n  const {\n    cart,\n  } = useContext(Context);\n  const { pathname } = useLocation();\n  const shippingMethodName = cart.selectedShippingMethod?.name;\n  const shippingMethodPrice = cart.selectedShippingMethod?.price;\n  const noShippingMethodSelected = !shippingMethodName && pathname === `/${CART_ROUTE}/${CHECKOUT_ROUTE}`;\n  const tax = getTax(getTotal(items));\n  const shippingCost = orderShippingCost || shippingMethodPrice;\n  let shippingVal: number | string = '';\n  if (noShippingMethodSelected) {\n    shippingVal = 'Select shipping below';\n  } else if (!shippingCost) {\n    shippingVal = 'Free';\n  } else {\n    shippingVal = shippingCost!;\n  }\n  const total = getIntTotal(items, shippingCost);\n  return (\n    <List\n      className=\"order-items-ul\"\n      items={items}\n      renderAs={((orderItem) => (\n        <li key={orderItem.id}>\n          <OrderItem\n            legend={orderItem.shopproduct.name}\n            value={orderItem.price}\n            addons={orderItem.addons}\n            image={showImages && orderItem.shopproduct.thumbnail}\n            review={orderItem.review}\n            orderItem={orderItem}\n            orderStatus={orderStatus}\n          />\n        </li>\n      ))}\n    >\n      <OrderItem\n        legend=\"Tax\"\n        value={tax}\n      />\n      <OrderItem\n        legend=\"Shipping\"\n        className=\"shipping\"\n        value={shippingVal}\n      />\n      <OrderItem\n        legend=\"Total\"\n        value={total}\n        className=\"total\"\n      />\n    </List>\n  );\n}\n\nOrderItems.defaultProps = {\n  showImages: false,\n  orderStatus: undefined,\n  orderShippingCost: 0,\n};\n\nexport default observer(OrderItems);\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\ninterface PageControlProps {\n  page: number;\n  pageLimit: number;\n  pageLimitReached: boolean;\n  changePage: (number: number) => void;\n}\n\nfunction PageControl({\n  page,\n  pageLimit,\n  pageLimitReached,\n  changePage,\n}: PageControlProps) {\n  const finalPages = page + 2 >= pageLimit || pageLimit < 5;\n  const firstPages = !finalPages && (page < 4);\n  const generatedNumberButtons: number[] = [];\n  if (finalPages) {\n    for (let p = pageLimit - 4; p <= pageLimit; p += 1) {\n      if (p > 0) {\n        generatedNumberButtons.push(p);\n      }\n    }\n  } else if (firstPages) {\n    for (let p = 1; p <= 5; p += 1) {\n      generatedNumberButtons.push(p);\n    }\n  } else {\n    for (let p = page - 2; p <= page + 2; p += 1) {\n      generatedNumberButtons.push(p);\n    }\n  }\n  return (\n    <div className=\"page-control\">\n      <button\n        className={`arrow-button back ${page === 1 && 'blocked-alt'}`}\n        type=\"button\"\n        onClick={() => changePage(page - 1)}\n        tabIndex={page === 1 ? -1 : 0}\n      >\n        <span>\n          ←\n        </span>\n        <span>\n          {' '}\n          Back\n        </span>\n      </button>\n      <div className=\"number-buttons\">\n        {generatedNumberButtons.map((p) => (\n          <button\n            className={`number-button ${p === page && 'current-page'}`}\n            type=\"button\"\n            onClick={() => changePage(p)}\n            key={p}\n            tabIndex={p === page ? -1 : 0}\n          >\n            {p}\n          </button>\n        ))}\n      </div>\n      <button\n        className={`arrow-button forward ${pageLimitReached && 'blocked-alt'}`}\n        type=\"button\"\n        onClick={() => changePage(page + 1)}\n        tabIndex={pageLimitReached ? -1 : 0}\n      >\n        <span>\n          Forward\n          {' '}\n        </span>\n        <span>\n          →\n        </span>\n      </button>\n    </div>\n  );\n}\n\nexport default observer(PageControl);\n","import React from 'react';\n\ninterface PaginatedItemsCounterProps {\n  page: number;\n  itemsPerPage: number;\n  dbCount: number;\n  descriptor: string;\n}\n\nfunction PaginatedItemsCounter({\n  page,\n  itemsPerPage,\n  dbCount,\n  descriptor,\n}: PaginatedItemsCounterProps) {\n  const currentPageCount = itemsPerPage * page;\n  return (\n    <span className=\"paginated-items-counter\">\n      {currentPageCount > dbCount ? dbCount : currentPageCount}\n      {' '}\n      of\n      {' '}\n      <span className=\"db-count\">\n        {dbCount}\n      </span>\n      {' '}\n      {descriptor}\n    </span>\n  );\n}\n\nexport default PaginatedItemsCounter;\n","import { useState, useEffect } from 'react';\nimport { getMaxPage } from '../utils/functions';\nimport useQuery from './useQuery';\n\ninterface UsePaginationProps {\n  itemsPerPage: number;\n  itemsInDb: number;\n  concurrentlySetQuery?: boolean;\n}\n\ninterface UsePaginationReturn {\n  page: number;\n  pageLimit: number;\n  pageLimitReached: boolean;\n  changePage: (number: number) => void;\n  nextPage: () => void;\n  prevPage: () => void;\n}\n\nconst usePagination = ({\n  itemsPerPage,\n  itemsInDb,\n  concurrentlySetQuery,\n}: UsePaginationProps): UsePaginationReturn => {\n  const {\n    searchParams,\n    setSearchParams,\n    searchParamsRecord,\n  } = useQuery(concurrentlySetQuery ? { page: '1' } : {});\n  const pageFromQuery = Number(searchParams.get('page')) || 1;\n  const [page, setPage] = useState<number>(1);\n  const [pageLimit, setPageLimit] = useState<number>(1);\n  const [pageLimitReached, setPageLimitReached] = useState<boolean>(false);\n  const changePage = (number: number) => {\n    const newPage = number > pageLimit || number < 1 ? pageLimit : number;\n    setPage(newPage);\n    if (concurrentlySetQuery) {\n      setSearchParams({ ...searchParamsRecord, page: number.toString() });\n    }\n  };\n  const nextPage = () => changePage(page + 1);\n  const prevPage = () => changePage(page - 1);\n  useEffect(() => {\n    const newPageLimit = getMaxPage(itemsInDb, itemsPerPage);\n    setPageLimit(newPageLimit || 1);\n    if (newPageLimit > 0 && page > newPageLimit) {\n      changePage(newPageLimit);\n    }\n  }, [itemsInDb, itemsPerPage]);\n  useEffect(() => { // accounts for back/forward browser buttons\n    if (page !== pageFromQuery) {\n      setPage(pageFromQuery);\n    }\n  }, [pageFromQuery]);\n  useEffect(() => {\n    if (page === pageLimit) {\n      setPageLimitReached(true);\n    } else {\n      setPageLimitReached(false);\n    }\n  }, [page, pageLimit, pageFromQuery]);\n  return {\n    page,\n    pageLimit,\n    pageLimitReached,\n    changePage,\n    nextPage,\n    prevPage,\n  };\n};\n\nexport default usePagination;\n","import { useEffect, useRef, useState } from 'react';\nimport {\n  QueryReqFetchMultipleAny, SearchParamsRecord, SequelizeFindAndCountAll,\n} from '../types/types';\nimport usePagination from './usePagination';\nimport useQuery from './useQuery';\n\ninterface UseQueriedItemsProps<T> {\n  itemsPerPage: number;\n  fetchAPI: (query: QueryReqFetchMultipleAny<T>) => Promise<SequelizeFindAndCountAll<T>>;\n  concurrentlySetQuery?: boolean;\n  initialSorting?: string;\n  queryProps?: QueryReqFetchMultipleAny<T>;\n  noFirstRender?: boolean;\n  handleSearchParams?: (searchParamsRecord: SearchParamsRecord, query: QueryReqFetchMultipleAny<T>) => QueryReqFetchMultipleAny<T>; // if you need search params like ?type=smartphone&brand=apple handled a certain way\n  pageOneOnSearchParamsChange?: boolean;\n  concatOnSearchParamsChange?: boolean;\n  concatOnFetchPageNumber?: boolean;\n}\n\ninterface UseQueriedItemsReturn<T> {\n  items: T[];\n  loading: boolean;\n  fetchAndSort: (string: string) => void;\n  fetchPageNumber: (page: number) => void;\n  changePage: (page: number) => void;\n  pageLimitReached: boolean;\n  setSorting: (string: string) => void;\n  page: number,\n  sorting: string,\n  pageLimit: number;\n  dbCount: number;\n  setItems: (items: any[]) => void;\n  setSearchParams: (obj: SearchParamsRecord) => void;\n  fetch: () => void;\n}\n\nfunction useQueriedItems<T>({\n  itemsPerPage,\n  fetchAPI,\n  concurrentlySetQuery,\n  initialSorting,\n  queryProps,\n  noFirstRender,\n  handleSearchParams,\n  pageOneOnSearchParamsChange,\n  concatOnSearchParamsChange,\n  concatOnFetchPageNumber,\n}: UseQueriedItemsProps<T>): UseQueriedItemsReturn<T> {\n  const [items, setItems] = useState<T[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [sorting, setSorting] = useState<string>(initialSorting || '');\n  const [dbCount, setDbProductCount] = useState<number>(0);\n  const {\n    page,\n    pageLimitReached,\n    changePage,\n    pageLimit,\n  } = usePagination({\n    itemsPerPage,\n    itemsInDb: dbCount,\n    concurrentlySetQuery,\n  });\n  const {\n    searchParamsRecord,\n    setSearchParams,\n    thereAreSearchParams,\n  } = useQuery();\n  const createQuery: () => QueryReqFetchMultipleAny<T> = () => {\n    let query: any = {\n      limit: itemsPerPage,\n      page,\n      order: {\n        [sorting]: true,\n      },\n      distinct: true,\n      ...queryProps,\n    };\n    if (thereAreSearchParams) {\n      if (handleSearchParams) {\n        query = handleSearchParams(searchParamsRecord, query);\n      } else {\n        const noMutate = { ...searchParamsRecord };\n        const noMutateKeys = Object.keys(noMutate);\n        for (let k = 0; k < noMutateKeys.length; k += 1) {\n          query[noMutateKeys[k]] = noMutate[noMutateKeys[k]];\n        }\n      }\n    }\n    return query;\n  };\n  const fetchAndSort = async (sortString?: string) => {\n    const query = createQuery();\n    query.order = { [sortString || sorting]: true };\n    query.limit = page * itemsPerPage;\n    query.page = 1;\n    try {\n      setLoading(true);\n      const fetchedItems = await fetchAPI(query);\n      setItems(fetchedItems.rows);\n      setSorting(sortString || sorting);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetch = async (addedParams?: QueryReqFetchMultipleAny<T>) => {\n    const query = createQuery();\n    try {\n      setLoading(true);\n      const fetchedItems = await fetchAPI({ ...query, ...addedParams });\n      setItems(concatOnSearchParamsChange ? items.concat(fetchedItems.rows) : fetchedItems.rows);\n      setDbProductCount(fetchedItems.count);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPageNumber = async (pageArg: number) => {\n    changePage(pageArg);\n    const query = createQuery();\n    query.page = pageArg;\n    try {\n      setLoading(true);\n      const fetchedItems = await fetchAPI({ ...query });\n      setItems(concatOnFetchPageNumber ? items.concat(fetchedItems.rows) : fetchedItems.rows);\n      setDbProductCount(fetchedItems.count);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const ref = useRef<boolean>(true); // prevent double fetch on render\n  useEffect(() => {\n    if (noFirstRender && ref.current) {\n      ref.current = false;\n      return;\n    }\n    if (pageOneOnSearchParamsChange) {\n      changePage(1);\n      fetch({ page: 1 });\n      return;\n    }\n    fetch();\n  }, [searchParamsRecord]);\n  return {\n    items,\n    setItems,\n    loading,\n    fetchAndSort,\n    pageLimitReached,\n    sorting,\n    setSorting,\n    page,\n    fetchPageNumber,\n    pageLimit,\n    dbCount,\n    setSearchParams,\n    fetch,\n    changePage,\n  };\n}\n\nexport default useQueriedItems;\n","import {\n  QueryReqCreateOrder,\n  IOrder,\n  SequelizeFindAndCountAll,\n  QueryReqFetchMultipleOrders,\n  QueryReqPutOrder,\n} from '../types/types';\nimport { $authHost } from './index';\n\nexport const fetchOrders = async (queryParams?: QueryReqFetchMultipleOrders): Promise<SequelizeFindAndCountAll<IOrder>> => {\n  const { data } = await $authHost.get('api/order', { params: queryParams });\n  return data;\n};\n\nexport const fetchOrdersAdmin = async (queryParams?: QueryReqFetchMultipleOrders): Promise<SequelizeFindAndCountAll<IOrder>> => {\n  const { data } = await $authHost.get('api/order/admin', { params: queryParams });\n  return data;\n};\n\nexport const fetchOrder = async (id: string): Promise<IOrder> => {\n  const { data } = await $authHost.get(`api/order/${id}`);\n  return data;\n};\n\nexport const createOrder = async (params?: QueryReqCreateOrder): Promise<IOrder> => {\n  const { data } = await $authHost.post('api/order', params);\n  return data;\n};\n\nexport const editOrder = async (id: string, obj: QueryReqPutOrder): Promise<IOrder> => {\n  const { data } = await $authHost.put(`api/order/${id}`, obj);\n  return data;\n};\n\nexport const deleteOrder = async (id: string): Promise<null> => {\n  const { data } = await $authHost.delete(`api/order/${id}`);\n  return data;\n};\n"],"names":["Address","address","email","firstName","lastName","addressLineOne","addressLineTwo","city","state","zip","className","defaultProps","statusLabel","order","setCanceledOrder","setReturnedOrderId","setNewStatusOrder","useState","showAddress","setShowAddress","createdAt","orderAddress","id","orderItems","status","orderDate","dateMonthYear","toString","orderDelivered","indexOf","DELIVERED","orderCanceled","CANCELED","orderCancellationRequested","CANCELLATION_REQUESTED","returnRequested","RETURN_REQUESTED","orderShipped","SHIPPED","showTrackingLink","length","PROCESSING","to","type","onClick","inverse","slice","items","orderStatus","orderShippingCost","shippingMethod","price","buttonStyle","Addon","addon","name","renderedPrice","formatPrice","convertIntToPrice","OrderItem","addons","legend","value","image","review","orderItem","pathname","useLocation","showReviewModal","setShowReviewModal","showReviewButton","ACCOUNT_ROUTE","ORDERS_ROUTE","renderAddons","showAPrice","ReviewModal","show","orderedProduct","close","undefined","productName","shopproduct","src","process","alt","RefocusedElement","Button","FullStar","List","renderAs","OrderItems","showImages","cart","useContext","Context","shippingMethodName","selectedShippingMethod","shippingMethodPrice","noShippingMethodSelected","CART_ROUTE","CHECKOUT_ROUTE","tax","getTax","getTotal","shippingCost","shippingVal","total","getIntTotal","thumbnail","observer","page","pageLimit","pageLimitReached","changePage","finalPages","firstPages","generatedNumberButtons","p","push","tabIndex","map","itemsPerPage","dbCount","descriptor","currentPageCount","itemsInDb","concurrentlySetQuery","useQuery","searchParams","setSearchParams","searchParamsRecord","pageFromQuery","Number","get","setPage","setPageLimit","setPageLimitReached","number","useEffect","newPageLimit","getMaxPage","nextPage","prevPage","fetchAPI","initialSorting","queryProps","noFirstRender","handleSearchParams","pageOneOnSearchParamsChange","concatOnSearchParamsChange","concatOnFetchPageNumber","setItems","loading","setLoading","sorting","setSorting","setDbProductCount","usePagination","thereAreSearchParams","createQuery","query","limit","distinct","noMutate","noMutateKeys","Object","keys","k","fetchAndSort","sortString","fetchedItems","rows","fetch","addedParams","concat","count","fetchPageNumber","pageArg","ref","useRef","current","fetchOrders","queryParams","$authHost","params","data","fetchOrdersAdmin","fetchOrder","createOrder","editOrder","obj"],"sourceRoot":""}