{"version":3,"file":"static/js/69.7d879e6e.chunk.js","mappings":"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","sources":["components/Account/AccountSideCol.tsx","components/LabeledRadioButton.tsx","components/SortingDropdown.tsx","components/Account/YourOrders/RequestCancellationModal.tsx","components/Account/YourOrders/ReturnOrderModal.tsx","components/OrdersControl.tsx","pages/Account/YourOrders/index.tsx"],"sourcesContent":["import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { accountSideColLinks } from '../../utils/arrays';\nimport Dropdown from '../Dropdown';\nimport List from '../List';\n\nfunction AccountSideCol() {\n  const { pathname } = useLocation();\n  const showInMobile = pathname === '/account';\n  return (\n    <div className={`left-side-col ${showInMobile && 'show'}`}>\n      <div className=\"labeled-col\">\n        <span className=\"label\">\n          Your account\n        </span>\n        <List\n          items={accountSideColLinks}\n          renderAs={({ to, label }) => (\n            <li key={`${to}_navButton`}>\n              <div className=\"divider\" />\n              <Dropdown\n                to={to}\n                label={label}\n              />\n            </li>\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default AccountSideCol;\n","import React, {\n  useState, useRef, MouseEvent, useEffect,\n} from 'react';\nimport useInputIncomplete from '../hooks/useInputIncomplete';\nimport useOnClickOutside from '../hooks/useOnOutsideClick';\n\ninterface LabeledRadioButtonProps {\n  label: string;\n  name: string;\n  boolean: boolean;\n  onClick: () => void;\n  id: string;\n  value: any;\n  className?: string;\n  light?: boolean;\n  warnCondition?: boolean;\n  selectedValue?: any;\n  pressedSubmit?: boolean;\n  setPressedSubmit?: (bool: boolean) => void;\n}\n\nfunction LabeledRadioButton({\n  label,\n  boolean,\n  name,\n  className,\n  light,\n  id,\n  onClick,\n  warnCondition,\n  value,\n  selectedValue,\n  pressedSubmit,\n  setPressedSubmit,\n}: LabeledRadioButtonProps) {\n  const {\n    warn,\n  } = useInputIncomplete({\n    condition: warnCondition,\n    pressedSubmit,\n    setPressedSubmit,\n    value: selectedValue,\n  });\n  const [active, setActive] = useState<boolean>(false);\n  const [boxShadow, setBoxShadow] = useState<boolean>(false);\n  const ref = useRef<HTMLButtonElement>(null);\n  const radioRef = useRef<HTMLInputElement>(null);\n  useOnClickOutside(ref, () => setBoxShadow(false));\n  useEffect(() => {\n    setBoxShadow(boolean);\n  }, [boolean]);\n  let boxShadowVal = null;\n  if (light && boxShadow) {\n    boxShadowVal = 'box-shadow-light';\n  } else if (boxShadow) {\n    boxShadowVal = 'box-shadow';\n  }\n  const clickHandler = () => {\n    onClick();\n    radioRef.current?.click();\n  };\n  return (\n    <button\n      className={`labeled-radio-button ${boolean && 'checked'} ${active && 'active'} ${className} ${warn && 'warn'}`}\n      ref={ref}\n      type=\"button\"\n      onMouseUp={() => setActive(false)}\n      onMouseLeave={() => setActive(false)}\n      onMouseDown={() => setActive(true)}\n      onMouseEnter={(e: MouseEvent<HTMLButtonElement>) => {\n        if (e.buttons > 0) {\n          setActive(true);\n        }\n      }}\n      onClick={clickHandler}\n    >\n      <div className={`radio-div ${boolean && 'checked'} ${active && 'active'} ${boxShadowVal}`} />\n      <input\n        type=\"radio\"\n        id={id}\n        value={value}\n        name={name}\n        className=\"radio-input-overlay\"\n        ref={radioRef}\n        tabIndex={-1}\n      />\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n    </button>\n  );\n}\n\nLabeledRadioButton.defaultProps = {\n  light: false,\n  className: '',\n  warnCondition: false,\n  pressedSubmit: undefined,\n  setPressedSubmit: undefined,\n  selectedValue: undefined,\n};\n\nexport default LabeledRadioButton;\n","import React from 'react';\nimport { INavButton } from '../types/types';\nimport Dropdown from './Dropdown';\n\ntype SortButton = Omit<INavButton, 'to'>;\n\ninterface SortingDropdownProps {\n  sortButtons: SortButton[];\n  label: string;\n}\n\nfunction SortingDropdown({\n  sortButtons,\n  label,\n}: SortingDropdownProps) {\n  return (\n    <div className=\"sort-dropdown\">\n      <span>\n        Sort by:\n      </span>\n      <Dropdown\n        label={label || sortButtons[0].label}\n        to={sortButtons}\n        dropdownIcon=\"angle\"\n        colorStyle=\"gray\"\n      />\n      <div className=\"divider vertical\" />\n    </div>\n  );\n}\n\nexport default SortingDropdown;\n","import React, { useContext, useState, FormEvent } from 'react';\nimport Context from '../../../context/context';\nimport { editOrder } from '../../../http/orderAPI';\nimport { IOrder } from '../../../types/types';\nimport { CANCELLATION_REQUESTED } from '../../../utils/consts';\nimport Button from '../../Button';\nimport CloseButton from '../../CloseButton';\nimport LabeledRadioButton from '../../LabeledRadioButton';\nimport List from '../../List';\nimport Modal from '../../Modal';\n\ninterface RequestCancellationModalProps {\n  canceledOrder: IOrder | undefined;\n  orders: IOrder[];\n  close: () => void;\n  setOrders: (items: IOrder[]) => void;\n}\n\nfunction RequestCancellationModal({\n  canceledOrder,\n  close,\n  orders,\n  setOrders,\n}: RequestCancellationModalProps) {\n  const {\n    notifications,\n  } = useContext(Context);\n  if (!canceledOrder) {\n    return null;\n  }\n  const {\n    id,\n    status,\n  } = canceledOrder;\n  const [success, setSuccess] = useState<boolean>(false);\n  const [pressedSubmit, setPressedSubmit] = useState<boolean>(false);\n  const [reason, setReason] = useState<string>('');\n  const formButtons = [\n    {\n      label: 'I found a better deal',\n      id: 'foundBetterDeal',\n      onClick: () => setReason('foundBetterDeal'),\n    },\n    {\n      label: 'Shipping too slow',\n      id: 'shippingTooSlow',\n      onClick: () => setReason('shippingTooSlow'),\n    },\n    {\n      label: 'I changed my mind on this purchase',\n      id: 'changedMind',\n      onClick: () => setReason('changedMind'),\n    },\n    {\n      label: 'Other/Unlisted reason',\n      id: 'unlistedReason',\n      onClick: () => setReason('unlistedReason'),\n    },\n  ];\n  const submit = async (event: FormEvent) => {\n    event.preventDefault();\n    setPressedSubmit(true);\n    try {\n      await editOrder(id, { status: [...status, CANCELLATION_REQUESTED] });\n      setSuccess(true);\n      setOrders(orders.map((order) => (order.id === id ? { ...order, status: [...order.status, CANCELLATION_REQUESTED] } : order)));\n    } catch (error: any) {\n      notifications.error(\n        error.response.data.message,\n      );\n    }\n  };\n  return (\n    <Modal\n      show={id}\n      close={close}\n      className=\"request-cancellation\"\n      id=\"request-cancellation\"\n      size=\"large\"\n    >\n      <div className=\"window-header\">\n        <div className=\"left-col\">\n          <span className=\"name\">\n            {`Order ${id}`}\n          </span>\n        </div>\n        <CloseButton\n          onMouseDown={close}\n        />\n      </div>\n      <form onSubmit={submit}>\n        {success ? (\n          <div className=\"body success\">\n            <h2 className=\"header\">\n              Cancel this order\n            </h2>\n            <p>\n              Your order was marked for cancellation. This window can be closed.\n            </p>\n          </div>\n        ) : (\n          <div className=\"body\">\n            <h2 className=\"header\">\n              Cancel this order\n            </h2>\n            <p>\n              We will act to the best of our ability to cancel your order depending on its processing status.\n            </p>\n            <div />\n            <p>\n              (Optional) Tell us why you are canceling your order.\n            </p>\n            <List\n              className=\"radio-button-ul\"\n              items={formButtons}\n              renderAs={(button) => (\n                <li key={button.id}>\n                  <LabeledRadioButton\n                    onClick={button.onClick}\n                    id={button.id}\n                    value={button.id}\n                    label={button.label}\n                    name=\"paymentMethod\"\n                    boolean={button.id === reason}\n                  />\n                </li>\n              )}\n            />\n          </div>\n        )}\n        <div className=\"bottom-buttons\">\n          <Button\n            className={`submit-button ${pressedSubmit && 'blocked'}`}\n            type=\"submit\"\n          >\n            Confirm\n          </Button>\n          <Button\n            onClick={close}\n          >\n            Close\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nexport default RequestCancellationModal;\n","import React from 'react';\nimport Address from '../../Address';\nimport CloseButton from '../../CloseButton';\nimport Modal from '../../Modal';\n\ninterface ReturnOrderModalProps {\n  close: () => void;\n  returnedOrderId: string | undefined;\n}\n\nfunction ReturnOrderModal({\n  close,\n  returnedOrderId,\n}: ReturnOrderModalProps) {\n  const returnAddress = {\n    firstName: 'Daniel',\n    lastName: 'Maramba',\n    addressLineOne: '8585 Wisconsin Avenue NW',\n    city: 'Washington',\n    state: 'DC',\n    zip: '20008',\n  };\n  return (\n    <Modal\n      show={returnedOrderId}\n      close={close}\n      className=\"return-order\"\n      id=\"return-order-modal\"\n      size=\"medium\"\n    >\n      <div className=\"window-header\">\n        <div className=\"left-col\">\n          <span className=\"name\">\n            {`Order ${returnedOrderId}`}\n          </span>\n        </div>\n        <CloseButton\n          onMouseDown={close}\n        />\n      </div>\n      <div className=\"body\">\n        <h2>\n          Returns\n        </h2>\n        <p>\n          To initiate a return, please mail your return package to our shop address listed below. You may make either a partial return of individual items or a full return of your order.\n        </p>\n        <Address\n          address={returnAddress}\n        />\n      </div>\n    </Modal>\n  );\n}\n\nexport default ReturnOrderModal;\n","import React, {\n  useState,\n} from 'react';\nimport useQueriedItems from '../hooks/useQueriedItems';\nimport { IOrder, QueryReqFetchMultipleOrders, SequelizeFindAndCountAll } from '../types/types';\nimport RequestCancellationModal from './Account/YourOrders/RequestCancellationModal';\nimport ReturnOrderModal from './Account/YourOrders/ReturnOrderModal';\nimport List from './List';\nimport Order from './Order';\nimport PageControl from './PageControl';\nimport PaginatedItemsCounter from './PaginatedItemsCounter';\nimport SortingDropdown from './SortingDropdown';\n\ninterface OrdersControlProps {\n  fetchAPI: (query: QueryReqFetchMultipleOrders) => Promise<SequelizeFindAndCountAll<any>>;\n}\n\nfunction OrdersControl({\n  fetchAPI,\n}: OrdersControlProps) {\n  const [canceledOrder, setCanceledOrder] = useState<IOrder>();\n  const [returnedOrderId, setReturnedOrderId] = useState<string | undefined>();\n  const itemsPerPage = 2;\n  const {\n    items: orders,\n    setItems: setOrders,\n    loading,\n    fetchPageNumber,\n    pageLimitReached,\n    pageLimit,\n    setSorting,\n    page,\n    dbCount,\n    sorting,\n  } = useQueriedItems<IOrder>({\n    noFirstRender: true,\n    initialSorting: 'byNewest',\n    fetchAPI,\n    itemsPerPage,\n    concurrentlySetQuery: true,\n  });\n  const noOrders = !loading && orders.length === 0;\n  let sortingDropdownLabel = '';\n  if (sorting === 'relevance') {\n    sortingDropdownLabel = 'Relevance';\n  }\n  if (sorting === 'byLowestPrice') {\n    sortingDropdownLabel = 'Price: Low to High';\n  }\n  if (sorting === 'byHighestRated') {\n    sortingDropdownLabel = 'Highest Rated';\n  }\n  const sortingButtons = [\n    {\n      label: 'Most recent',\n      callback: () => setSorting('mostRecent'),\n    },\n  ];\n  return (\n    <div className=\"orders-control\">\n      <ReturnOrderModal\n        returnedOrderId={returnedOrderId}\n        close={() => setReturnedOrderId(undefined)}\n      />\n      <RequestCancellationModal\n        canceledOrder={canceledOrder}\n        orders={orders}\n        setOrders={setOrders}\n        close={() => setCanceledOrder(undefined)}\n      />\n      <div\n        className=\"sorting-buttons-row\"\n      >\n        <SortingDropdown\n          sortButtons={sortingButtons}\n          label={sortingDropdownLabel}\n        />\n      </div>\n      <div className=\"divider\" />\n      {noOrders && (\n        <span className=\"no-orders\">\n          No orders on record\n        </span>\n      )}\n      <List\n        className=\"orders-ul\"\n        items={orders}\n        renderAs={((order) => (\n          <li key={order.id}>\n            <Order\n              order={order}\n              setCanceledOrder={setCanceledOrder}\n              setReturnedOrderId={setReturnedOrderId}\n            />\n          </li>\n        ))}\n      />\n      {!noOrders && (\n        <PaginatedItemsCounter\n          page={page}\n          itemsPerPage={itemsPerPage}\n          dbCount={dbCount}\n          descriptor=\"orders\"\n        />\n      )}\n      {!noOrders && (\n        <PageControl\n          page={page}\n          changePage={fetchPageNumber}\n          pageLimitReached={pageLimitReached}\n          pageLimit={pageLimit}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default OrdersControl;\n","import React from 'react';\nimport { fetchOrders } from '../../../http/orderAPI';\nimport OrdersControl from '../../../components/OrdersControl';\nimport ColumnedPage from '../../../components/ColumnedPage';\nimport AccountSideCol from '../../../components/Account/AccountSideCol';\n\nfunction YourOrders() {\n  return (\n    <ColumnedPage\n      id=\"your-orders\"\n      header=\"Your orders\"\n      leftSideCol={<AccountSideCol />}\n      noDiv\n    >\n      <OrdersControl\n        fetchAPI={fetchOrders}\n      />\n    </ColumnedPage>\n  );\n}\n\nexport default YourOrders;\n"],"names":["showInMobile","useLocation","pathname","className","items","accountSideColLinks","renderAs","to","label","LabeledRadioButton","boolean","name","light","id","onClick","warnCondition","value","selectedValue","pressedSubmit","setPressedSubmit","warn","useInputIncomplete","condition","useState","active","setActive","boxShadow","setBoxShadow","ref","useRef","radioRef","useOnClickOutside","useEffect","boxShadowVal","type","onMouseUp","onMouseLeave","onMouseDown","onMouseEnter","e","buttons","current","click","tabIndex","htmlFor","defaultProps","undefined","sortButtons","dropdownIcon","colorStyle","canceledOrder","close","orders","setOrders","notifications","useContext","Context","status","success","setSuccess","reason","setReason","formButtons","submit","event","preventDefault","editOrder","CANCELLATION_REQUESTED","map","order","error","response","data","message","Modal","show","size","CloseButton","onSubmit","List","button","Button","returnedOrderId","Address","address","firstName","lastName","addressLineOne","city","state","zip","fetchAPI","setCanceledOrder","setReturnedOrderId","useQueriedItems","noFirstRender","initialSorting","itemsPerPage","concurrentlySetQuery","setItems","loading","fetchPageNumber","pageLimitReached","pageLimit","setSorting","page","dbCount","sorting","noOrders","length","sortingDropdownLabel","sortingButtons","callback","SortingDropdown","Order","PaginatedItemsCounter","descriptor","PageControl","changePage","ColumnedPage","header","leftSideCol","AccountSideCol","noDiv","fetchOrders"],"sourceRoot":""}